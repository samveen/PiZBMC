#!/usr/bin/python3
# This is the proto BMC for the Pi Zero.
# This is based on the the pyghmi library.
#
# Copyright 2020 Onwards, Samveen S. Gulati.
# See LICENSE file for details

import argparse
import sys
import logging
import struct
import traceback
import uuid
import ipaddress

import logging
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

import pyghmi.ipmi.command as ipmicommand
import pyghmi.ipmi.console as console
import pyghmi.ipmi.private.serversession as serversession
import pyghmi.ipmi.private.session as ipmisession

__author__=""

logger = logging.getLogger()

class PiZBmc(serversession.IpmiServer):

    activated = False
    sol = None
    iohandler = None

    def __init__(self, authdata, port, address):
        logger.info("BMC initialization started.")
        super(PiZBmc, self).__init__(authdata, port, address=address)
        self.powerstate = 'off'
        self.bootdevice = 'default'
        self.firmwaremajor = 0
        self.firmwareminor = 1
        self.mfgid = 58000 # IANA Enterprise number
        self.prodid = 0x05
        with open('/sys/firmware/devicetree/base/serial-number') as f:
           pi_serial= f.read()
        project_uuid=uuid.uuid3(uuid.NAMESPACE_URL, "https://github.com/samveen/PiZBMC")
        self.uuid = uuid.uuid3(project_uuid, pi_serial[0:-1])

    def activate_payload(self, request, session):
        if self.iohandler is None:
            session.send_ipmi_response(code=0x81)
        elif not self.is_active():
            session.send_ipmi_response(code=0x81)
        elif self.activated:
            session.send_ipmi_response(code=0x80)
        else:
            self.activated = True
            solport = list(struct.unpack('BB', struct.pack('!H', self.port)))
            session.send_ipmi_response(
                data=[0, 0, 0, 0, 1, 0, 1, 0] + solport + [0xff, 0xff])
            self.sol = console.ServerConsole(session, self.iohandler)

    def deactivate_payload(self, request, session):
        if self.iohandler is None:
            session.send_ipmi_response(code=0x81)
        elif not self.activated:
            session.send_ipmi_response(code=0x80)
        else:
            session.send_ipmi_response()
            self.sol.close()
            self.activated = False
            self.sol = None

    @staticmethod
    def handle_missing_command(session):
        session.send_ipmi_response(code=0xc1)

    def get_chassis_status(self, session):
        try:
            powerstate = self.get_power_state()
        except NotImplementedError:
            return session.send_ipmi_response(code=0xc1)
        if powerstate in ipmicommand.power_states:
            powerstate = ipmicommand.power_states[powerstate]
        if powerstate not in (0, 1):
            raise Exception('BMC implementation mistake')
        statusdata = [powerstate, 0, 0]
        session.send_ipmi_response(data=statusdata)

    def control_chassis(self, request, session):
        rc = 0
        try:

            directive = request['data'][0]
            if directive == 0:
                rc = self.power_off()
            elif directive == 1:
                rc = self.power_on()
            elif directive == 2:
                rc = self.power_cycle()
            elif directive == 3:
                rc = self.power_reset()
            elif directive == 4:
                # i.e. Pulse a diagnostic interrupt(NMI) directly
                rc = self.pulse_diag()
            elif directive == 5:
                rc = self.power_shutdown()
            if rc is None:
                rc = 0
            session.send_ipmi_response(code=rc)
        except NotImplementedError:
            session.send_ipmi_response(code=0xcc)
    def get_boot_device(self):
        return self.bootdevice

    def get_system_boot_options(self, request, session):
        if request['data'][0] == 5:  # boot flags
            try:
                bootdevice = self.get_boot_device()
            except NotImplementedError:
                session.send_ipmi_response(data=[1, 5, 0, 0, 0, 0, 0])
            if (type(bootdevice) != int
                    and bootdevice in ipmicommand.boot_devices):
                bootdevice = ipmicommand.boot_devices[bootdevice]
            paramdata = [1, 5, 0b10000000, bootdevice, 0, 0, 0]
            return session.send_ipmi_response(data=paramdata)
        else:
            session.send_ipmi_response(code=0x80)

    def set_boot_device(self, bootdevice):
        self.bootdevice = bootdevice

    def set_system_boot_options(self, request, session):
        if request['data'][0] in (0, 3, 4):
            # for now, just smile and nod at boot flag bit clearing
            # implementing it is a burden and implementing it does more to
            # confuse users than serve a useful purpose
            session.send_ipmi_response()
        elif request['data'][0] == 5:
            bootdevice = (request['data'][2] >> 2) & 0b1111
            try:
                bootdevice = ipmicommand.boot_devices[bootdevice]
            except KeyError:
                session.send_ipmi_response(code=0xcc)
                return
            self.set_boot_device(bootdevice)
            session.send_ipmi_response()
        else:
            raise NotImplementedError

    def handle_raw_request(self, request, session):
        logger.info("Request[0x{:02x},0x{:02x},{}]".format(request['netfn'],request['command'],request['data']))
        try:
            if request['netfn'] == 6: # Application requests
                return self.route_application_requests(request,session)
            elif request['netfn'] == 0: # Chassis requests
                return self.route_chassis_requests(request, session)
            elif request['netfn'] == 0x0c: # Transport requests
                return self.route_transport_requests(request, session)
            logger.info("Unhandled request");
            session.send_ipmi_response(code=0xc1)
        except NotImplementedError:
            logger.info("Request not implemented");
            session.send_ipmi_response(code=0xc1)
        except Exception:
            session._send_ipmi_net_payload(code=0xff)
            traceback.print_exc()

    def route_chassis_requests(self, request, session):
        logger.info("Request Type: Chassis")
        if request['command'] == 1:  # get chassis status
            return self.get_chassis_status(session)
        elif request['command'] == 2:  # chassis control
            return self.control_chassis(request, session)
        elif request['command'] == 8:  # set boot options
            return self.set_system_boot_options(request, session)
        elif request['command'] == 9:  # get boot options
            return self.get_system_boot_options(request, session)
        else:
            logger.info("Unhandled Chassis Sub-Command.")
            return session.send_ipmi_response(code=0xc1)

    def route_transport_requests(self, request, session):
        logger.info("Request Type: Transport")
        if request['command'] == 2:  # get lan config
            return self.get_lan_settings(request,session)
        else:
            logger.info("Unhandled Transport Sub-Command.")
            return session.send_ipmi_response(code=0xc1)

    def get_lan_settings(self, request, session):
        channel = request['data'][0] & b'\x0f'[0]
        param_sel = request['data'][1]
        set_sel = request['data'][2]
        block_sel = request['data'][3]
        logger.info("LAN info for channel {} requested.".format(channel))
        if channel== 0x0e:
            channel == 1
        response = [0x11] # Param revision
        if param_sel == 0:
            response += [1]
        elif param_sel == 1:
            response += [1]
        elif param_sel == 2:
            fields = 5
            response += struct.unpack('{}B'.format(fields),bytearray(fields))
        elif param_sel == 3:
            response += struct.unpack('4B',ipaddress.ip_address("1.2.3.4").packed)  # 3 - IP
        elif param_sel == 4:
            response += [0x01]  #  4 - IP SOURCE
        elif param_sel == 5:
            response += struct.unpack('6B', struct.pack('<Q', 0x112233445566)[0:6]) # 5 - MAC
        elif param_sel == 6:
            response += ipaddress.ip_address("255.255.255.0").packed # 6 - NETMASK
        elif param_sel == 7:
            response += [0x40,0x40,0x10] # 7 - IPv4 Header params
        elif param_sel == 8:
            response += [0x02,0x6f]
        elif param_sel == 9:
            response += [0,0]
        elif param_sel == 10:
            response += [0]
        elif param_sel == 11:
            response += [0]
        elif param_sel == 12:
            response += ipaddress.ip_address("1.0.0.2").packed # 12 - Gateway
        elif param_sel == 13:
            response += struct.unpack('6B', struct.pack('<Q', 0x778899aabbcc)[0:6]) # 13 - Gateway MAC
        elif param_sel == 14:
            response += ipaddress.ip_address("0.0.0.0").packed # 14 - Gateway 2
        elif param_sel == 15:
            response += struct.unpack('6B', struct.pack('<Q', 0x000000000000)[0:6]) # 15 - Gateway MAC 2
        elif param_sel == 16:
            comm_str = b"public" # 16 - community string
            response += struct.unpack('18B',comm_str+bytearray(18-len(comm_str)))
        elif param_sel == 17:
            response += [0]
        elif param_sel == 18:
            response += [0,0,0,0]
        elif param_sel == 19:
            response += [0,0,0, 0,0,0,0, 0,0,0,0,0,0]
        elif param_sel == 20:
            response += [0,0]
        elif param_sel == 21:
            response += [0]
        elif param_sel == 22:
            response += [0]
        elif param_sel == 23:
            fields=16
            response += struct.unpack('{}B'.format(fields),bytearray(fields))
        elif param_sel == 24:
            fields=8
            response += struct.unpack('{}B'.format(fields),bytearray(fields))
        elif param_sel == 25:
            fields=[0,0,0,0]
        elif param_sel == 26:
            fields=6
            response += struct.unpack('{}B'.format(fields),bytearray(fields))
        elif param_sel == 4:
            response += [0] # 50 -IPv6 support
        else:
            return session.send_ipmi_response(code=0x80)

        session.send_ipmi_response(data=response)


    def route_application_requests(self, request, session):
        logger.info("Request Type: Application")
        if request['command'] == 1:  # get device id
            return self.send_device_id(session)
        elif request['command'] == 2:  # [b]mc reset cold
            return session.send_ipmi_response(code=self.cold_reset())
        elif request['command'] == 3:  # [b]mc reset warm
            return self.warm_reset(session)
        elif request['command'] == 4:  # [b]mc self test
            return self.selftest(session)
        elif request['command'] == 0x37:  # get device GUID
            return self.send_guid(session)
        elif request['command'] == 0x41:  # get channel access
            return self.get_channel_access(request, session)
        elif request['command'] == 0x42:  # get channel info
            return self.get_channel_info(request, session)
        elif request['command'] == 0x48:  # activate payload
            return self.activate_payload(request, session)
        elif request['command'] == 0x49:  # deactivate payload
            return self.deactivate_payload(request, session)
        elif request['command'] == 0x59:  # getsysinfo
            return self.getsysinfo(request, session)
        else:
            logger.info("Unhandled Application Sub-Command.")
            return session.send_ipmi_response(code=0xc1)

    def get_channel_access(self, request, session):
        channel = request['data'][0] & b'\x0f'[0]
        access_type = request['data'][1] & b'\xc0'[0]
        logger.info("channel access for channel {} requested.".format(channel))
        if channel== 0x0e:
            channel == 1
        response =  [0x3b,0x04]
        logger.info(response)
        session.send_ipmi_response(data=response)

    def get_channel_info(self, request, session):
        channel = request['data'][0] & b'\x0f'[0]
        logger.info("channel info for channel {} requested.".format(channel))
        if channel== 0x0e:
            channel == 1
        response =  [channel] # Channel
        response += [b'\x04'[0] & b'\x7f'[0]] # Channel medium type
        response += [b'\x01'[0] & b'\x1f'[0]] # Channel protocol type
        response += [(b'\x00'[0] & b'\xc0'[0])] # Session support - sessionless, no active session
        response += struct.unpack('3B', struct.pack('<I', self.mfgid)[0:3]) # Verdor
        response += [0xff,0] # Aux Channel info

        logger.info(response)
        session.send_ipmi_response(data=response)


    def send_device_id(self, session):
        logger.info("Device ID requested.")
        response = [self.deviceid, self.revision, self.firmwaremajor,
                    self.firmwareminor, self.ipmiversion,
                    self.additionaldevices]
        response += struct.unpack('3B', struct.pack('<I', self.mfgid)[0:3])
        response += struct.unpack('2B', struct.pack('<I', self.prodid)[0:2])
        session.send_ipmi_response(data=response)

    def cold_reset(self):
        # Reset of the BMC, not managed system, here we will exit the demo
        logger.info('Cold BMC Reset requested. Shutting down.')
        sys.exit(0)

    def warm_reset(self,session):
        response = 0
        session.send_ipmi_response(data=response)

    def get_power_state(self):
        logger.info('Power Status requested.')
        return self.powerstate

    def power_off(self):
        # this should be power down without waiting for clean shutdown
        self.powerstate = 'off'
        logger.info('Power Off requested.')

    def power_on(self):
        self.powerstate = 'on'
        logger.info('Power On requested.')

    def power_cycle(self):
        logger.info("Power Cycle requested.")
        if self.powerstate == "off":
            self.powerstate = "on"
        else:
            self.powerstate = "off"

    def power_reset(self):
        logger.info('Power Reset requested.')
        pass

    def pulse_diag(self):
        raise NotImplementedError

    def power_shutdown(self):
        # should attempt a clean shutdown
        logger.info('OS Shutdown requested.')
        self.powerstate = 'off'

    def is_active(self):
        logger.info('Power is_active requested.')
        return self.powerstate == 'on'

    def iohandler(self, data):
        logger.info(data)
        if self.sol:
            self.sol.send_data(data)

    def send_guid(self, session):
        logger.info('BMC guid requested.')
        response = self.uuid.bytes
        session.send_ipmi_response(data=response)

    def selftest(self, session):
        raise NotImplementedError

    def getsysinfo(self, request, session):
        raise NotImplementedError


    @classmethod
    def listen(cls, timeout=30):
        while True:
            ipmisession.Session.wait_for_rsp(timeout)

def main():
    parser = argparse.ArgumentParser(
        prog='PiZBMC',
        description='A proto BMC for the Raspberry Pi Zero',
    )
    parser.add_argument('--port',
                        dest='port',
                        type=int,
                        default=623,
                        help='Port to listen on; defaults to 623')
    parser.add_argument('--ip',
                        dest='ip',
                        default="::",
                        help='IP Address to bind to; defaults to "::"')
    args = parser.parse_args()
    mybmc = PiZBmc({'admin': 'password'}, port=args.port, address=args.ip)
    mybmc.listen()


if __name__ == '__main__':
    print("Starting up Fake BMC")
    sys.exit(main())

#vim: et ts=4 sw=4 noincsearch :
